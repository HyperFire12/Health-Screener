import React, { useEffect, useState } from "react";
import { Box, hslToRgb } from "@mui/material";

const HumanHeat = (props) => {
  const heat = props?.heat;

  const { innerWidth: width } = window;

  const [boxDimensions, setBoxDimensions] = useState([
    width / 4,
    ((width / 4) * 31) / 22,
  ]);

  useEffect(() => {
    function handleResize() {
      setBoxDimensions([
        window.innerWidth / 4,
        ((window.innerWidth / 4) * 31) / 22,
      ]);
    }

    window.addEventListener("resize", handleResize);

    return (_) => {
      window.removeEventListener("resize", handleResize);
    };
  });

  /* 
 012345678901234567890123456789012
0**************11111**************
1************111111111************
2************111111111************
3*************1111111*************
4**************11111**************
5**************11111**************
6*******1111111111111111111*******
7*****1111**11111111111**1111*****
8****1111***11111111111***1111****
9***1111****11111111111****1111***
0**1111*****11111111111*****1111**
1*1111******11111111111******1111*
21111*******11111111111*******1111
3***********11111111111***********
4***********11111111111***********
5*********111111***111111*********
6********111111*****111111********
7*******111111*******111111*******
8******111111*********111111******
9*****111111***********111111*****
0****111111*************111111****
1***111111***************111111***
*/

  const coordinates = [
    [14, 0],
    [15, 0],
    [16, 0],
    [17, 0],
    [18, 0],
    [12, 1],
    [13, 1],
    [14, 1],
    [15, 1],
    [16, 1],
    [17, 1],
    [18, 1],
    [19, 1],
    [20, 1],
    [12, 2],
    [13, 2],
    [14, 2],
    [15, 2],
    [16, 2],
    [17, 2],
    [18, 2],
    [19, 2],
    [20, 2],
    [13, 3],
    [14, 3],
    [15, 3],
    [16, 3],
    [17, 3],
    [18, 3],
    [19, 3],
    [14, 4],
    [15, 4],
    [16, 4],
    [17, 4],
    [18, 4],
    [14, 5],
    [15, 5],
    [16, 5],
    [17, 5],
    [18, 5],
    [7, 6],
    [8, 6],
    [9, 6],
    [10, 6],
    [11, 6],
    [12, 6],
    [13, 6],
    [14, 6],
    [15, 6],
    [16, 6],
    [17, 6],
    [18, 6],
    [19, 6],
    [20, 6],
    [21, 6],
    [22, 6],
    [23, 6],
    [24, 6],
    [25, 6],
    [5, 7],
    [6, 7],
    [7, 7],
    [8, 7],
    [11, 7],
    [12, 7],
    [13, 7],
    [14, 7],
    [15, 7],
    [16, 7],
    [17, 7],
    [18, 7],
    [19, 7],
    [20, 7],
    [21, 7],
    [24, 7],
    [25, 7],
    [26, 7],
    [27, 7],
    [4, 8],
    [5, 8],
    [6, 8],
    [7, 8],
    [11, 8],
    [12, 8],
    [13, 8],
    [14, 8],
    [15, 8],
    [16, 8],
    [17, 8],
    [18, 8],
    [19, 8],
    [20, 8],
    [21, 8],
    [25, 8],
    [26, 8],
    [27, 8],
    [28, 8],
    [3, 9],
    [4, 9],
    [5, 9],
    [6, 9],
    [11, 9],
    [12, 9],
    [13, 9],
    [14, 9],
    [15, 9],
    [16, 9],
    [17, 9],
    [18, 9],
    [19, 9],
    [20, 9],
    [21, 9],
    [26, 9],
    [27, 9],
    [28, 9],
    [29, 9],
    [2, 10],
    [3, 10],
    [4, 10],
    [5, 10],
    [11, 10],
    [12, 10],
    [13, 10],
    [14, 10],
    [15, 10],
    [16, 10],
    [17, 10],
    [18, 10],
    [19, 10],
    [20, 10],
    [21, 10],
    [27, 10],
    [28, 10],
    [29, 10],
    [30, 10],
    [1, 11],
    [2, 11],
    [3, 11],
    [4, 11],
    [11, 11],
    [12, 11],
    [13, 11],
    [14, 11],
    [15, 11],
    [16, 11],
    [17, 11],
    [18, 11],
    [19, 11],
    [20, 11],
    [21, 11],
    [28, 11],
    [29, 11],
    [30, 11],
    [31, 11],
    [0, 12],
    [1, 12],
    [2, 12],
    [3, 12],
    [11, 12],
    [12, 12],
    [13, 12],
    [14, 12],
    [15, 12],
    [16, 12],
    [17, 12],
    [18, 12],
    [19, 12],
    [20, 12],
    [21, 12],
    [29, 12],
    [30, 12],
    [31, 12],
    [32, 12],
    [11, 13],
    [12, 13],
    [13, 13],
    [14, 13],
    [15, 13],
    [16, 13],
    [17, 13],
    [18, 13],
    [19, 13],
    [20, 13],
    [21, 13],
    [9, 14],
    [10, 14],
    [11, 14],
    [12, 14],
    [13, 14],
    [14, 14],
    [18, 14],
    [19, 14],
    [20, 14],
    [21, 14],
    [22, 14],
    [23, 14],
    [8, 15],
    [9, 15],
    [10, 15],
    [11, 15],
    [12, 15],
    [13, 15],
    [19, 15],
    [20, 15],
    [21, 15],
    [22, 15],
    [23, 15],
    [24, 15],
    [7, 16],
    [8, 16],
    [9, 16],
    [10, 16],
    [11, 16],
    [12, 16],
    [20, 16],
    [21, 16],
    [22, 16],
    [23, 16],
    [24, 16],
    [25, 16],
    [6, 17],
    [7, 17],
    [8, 17],
    [9, 17],
    [10, 17],
    [11, 17],
    [21, 17],
    [22, 17],
    [23, 17],
    [24, 17],
    [25, 17],
    [26, 17],
    [5, 18],
    [6, 18],
    [7, 18],
    [8, 18],
    [9, 18],
    [10, 18],
    [22, 18],
    [23, 18],
    [24, 18],
    [25, 18],
    [26, 18],
    [27, 18],
    [4, 19],
    [5, 19],
    [6, 19],
    [7, 19],
    [8, 19],
    [9, 19],
    [23, 19],
    [24, 19],
    [25, 19],
    [26, 19],
    [27, 19],
    [28, 19],
    [3, 20],
    [4, 20],
    [5, 20],
    [6, 20],
    [7, 20],
    [8, 20],
    [24, 20],
    [25, 20],
    [26, 20],
    [27, 20],
    [28, 20],
    [29, 20],
    [2, 21],
    [3, 21],
    [4, 21],
    [5, 21],
    [6, 21],
    [7, 21],
    [25, 21],
    [26, 21],
    [27, 21],
    [28, 21],
    [29, 21],
    [30, 21],
  ];

  function getColor(value) {
    let green =
      255 - ((value - 5) / 5) * 255 > 255
        ? "ff"
        : (255 - ((value - 5) / 5) * 255).toString(16);
    let red =
      ((value + 5) / 5) * 255 > 255
        ? "ff"
        : (((value + 5) / 5) * 255).toString(16);
    if (red.length === 1) red = red + "0";
    if (green.length === 1) green = green + "0";

    console.log("#" + red + green + "00");
    return "#" + red + green + "00";
  }

  return (
    <Box
      sx={{
        position: "absolute",
        top: 5,
        right: 5,
        //backgroundColor: "black",
        width: boxDimensions[0] + 10,
        height: boxDimensions[1] + 10,
      }}
    >
      {coordinates.map((item, index) => {
        return (
          <Box
            key={index}
            sx={{
              position: "absolute",
              left: (item[0] * boxDimensions[0]) / 33 + 5,
              top: (item[1] * boxDimensions[1]) / 22 + 5,
              backgroundColor: heat[index] ? getColor(heat[index]) : "#00ff00",
              width: boxDimensions[0] / 33 + 1,
              height: boxDimensions[1] / 22 + 1,
            }}
          />
        );
      })}
    </Box>
  );
};

export default HumanHeat;
